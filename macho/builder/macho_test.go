package builder_test

import (
	"bytes"
	"testing"

	"github.com/RealA10N/macho-aarch64-asm/macho/builder"
	"github.com/RealA10N/macho-aarch64-asm/macho/header"
	"github.com/RealA10N/macho-aarch64-asm/macho/load/nlist64"
	nlist64_builders "github.com/RealA10N/macho-aarch64-asm/macho/load/nlist64/builders"
	"github.com/RealA10N/macho-aarch64-asm/macho/load/section64"
	"github.com/RealA10N/macho-aarch64-asm/macho/load/segment64"
	"github.com/RealA10N/macho-aarch64-asm/macho/load/symtab"
	"github.com/RealA10N/macho-aarch64-asm/macho/load/symtab/symbol"
	"github.com/stretchr/testify/assert"
)

func TestObjectSegment64OnlyExpectedBinary(t *testing.T) {
	headerBuilder := header.MachoHeaderBuilder{
		Magic:      header.Magic64Bit,
		CpuType:    header.Arm64CpuType,
		CpuSubType: header.AllArmProcessors,
		FileType:   header.Object,
	}

	data := []byte{0x00, 0x00, 0x01, 0x8B, 0xC0, 0x03, 0x5F, 0xD6}

	sectionBuilder := section64.Section64Builder{
		SectionName: [16]byte{'_', '_', 't', 'e', 'x', 't', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		SegmentName: [16]byte{'_', '_', 'T', 'E', 'X', 'T', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		Data:        data,
		Flags:       section64.AttrPureInstructions | section64.AttrSomeInstructions,
	}

	segmentBuilder := segment64.Segment64Builder{
		SegmentName:        [16]byte{'_', '_', 'T', 'E', 'X', 'T', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		Sections:           []section64.Section64Builder{sectionBuilder},
		VirtualMemorySize:  8,
		MaxProtections:     segment64.AllowAllProtection,
		InitialProtections: segment64.AllowAllProtection,
	}

	machoBuilder := builder.MachoBuilder{
		Header:   headerBuilder,
		Commands: []builder.CommandBuilder{segmentBuilder},
	}

	expected := []byte{
		0xCF, 0xFA, 0xED, 0xFE, 0x0C, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x19, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x8B, 0xC0, 0x03, 0x5F, 0xD6,
	}

	buffer := new(bytes.Buffer)
	n, err := machoBuilder.WriteTo(buffer)

	assert.NoError(t, err)
	assert.EqualValues(t, len(expected), n)
	assert.Equal(t, expected, buffer.Bytes())
}

func TestObjectSegmentAndSymtabExpectedBinary(t *testing.T) {
	headerBuilder := header.MachoHeaderBuilder{
		Magic:      header.Magic64Bit,
		CpuType:    header.Arm64CpuType,
		CpuSubType: header.AllArmProcessors,
		FileType:   header.Object,
	}

	data := []byte{
		0x00, 0x00, 0x01, 0x8B, // add x0, x0, x1
		0xC0, 0x03, 0x5F, 0xD6, // ret
		0x00, 0x00, 0x01, 0xCB, // sub x0, x0, x1
		0xC0, 0x03, 0x5F, 0xD6, // ret
	}

	sectionBuilder := section64.Section64Builder{
		SectionName: [16]byte{'_', '_', 't', 'e', 'x', 't', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		SegmentName: [16]byte{'_', '_', 'T', 'E', 'X', 'T', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		Data:        data,
		Flags:       section64.AttrPureInstructions | section64.AttrSomeInstructions,
	}

	segmentBuilder := segment64.Segment64Builder{
		SegmentName:        [16]byte{'_', '_', 'T', 'E', 'X', 'T', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		Sections:           []section64.Section64Builder{sectionBuilder},
		VirtualMemorySize:  16,
		MaxProtections:     segment64.AllowAllProtection,
		InitialProtections: segment64.AllowAllProtection,
	}

	symtabBuilder := symtab.SymtabBuilder{
		Symbols: []symbol.SymbolBuilder{
			nlist64_builders.SectionNlist64Builder{
				Name:        "_add",
				Type:        nlist64.ExternalSymbol,
				Section:     1,
				Offset:      0,
				Description: nlist64.ReferenceFlagUndefinedNonLazy,
			},
			nlist64_builders.SectionNlist64Builder{
				Name:        "_sub",
				Type:        nlist64.ExternalSymbol,
				Section:     1,
				Offset:      8,
				Description: nlist64.ReferenceFlagUndefinedNonLazy,
			},
		},
	}

	machoBuilder := builder.MachoBuilder{
		Header:   headerBuilder,
		Commands: []builder.CommandBuilder{segmentBuilder, symtabBuilder},
	}

	expected := []byte{
		0xCF, 0xFA, 0xED, 0xFE, 0x0C, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x19, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
		0xE0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x8B, 0xC0, 0x03, 0x5F, 0xD6,
		0x00, 0x00, 0x01, 0xCB, 0xC0, 0x03, 0x5F, 0xD6,
		0x01, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x5F, 0x61, 0x64, 0x64, 0x00, 0x5F, 0x73,
		0x75, 0x62, 0x00,
	}

	buffer := new(bytes.Buffer)
	n, err := machoBuilder.WriteTo(buffer)

	assert.NoError(t, err)
	assert.EqualValues(t, len(expected), n)
	assert.Equal(t, expected, buffer.Bytes())
}
