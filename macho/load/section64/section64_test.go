package section64_test

import (
	"testing"

	"github.com/RealA10N/macho-aarch64-asm/macho/load/section64"
	"github.com/stretchr/testify/assert"
)

func TestSection64ExpectedMarshalBinary(t *testing.T) {
	expected := []byte{
		0x5F, 0x5F, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x5F, 0x5F, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	section := section64.Section64{
		SectionName:         [16]byte{'_', '_', 't', 'e', 'x', 't', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		SegmentName:         [16]byte{'_', '_', 'T', 'E', 'X', 'T', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		Address:             0,
		Size:                8,
		Offset:              312,
		Align:               0,
		RelocationOffset:    0,
		NumberOfRelocations: 0,
		Flags:               section64.AttrPureInstructions | section64.AttrSomeInstructions,
	}

	got, err := section.MarshalBinary()

	assert.NoError(t, err)
	assert.Equal(t, expected, got)
}
